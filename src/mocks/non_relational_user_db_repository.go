// Code generated by MockGen. DO NOT EDIT.
// Source: Faceit/src/internal/ports (interfaces: NonRelationalUserDBRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "Faceit/src/internal/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNonRelationalUserDBRepository is a mock of NonRelationalUserDBRepository interface.
type MockNonRelationalUserDBRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNonRelationalUserDBRepositoryMockRecorder
}

// MockNonRelationalUserDBRepositoryMockRecorder is the mock recorder for MockNonRelationalUserDBRepository.
type MockNonRelationalUserDBRepositoryMockRecorder struct {
	mock *MockNonRelationalUserDBRepository
}

// NewMockNonRelationalUserDBRepository creates a new mock instance.
func NewMockNonRelationalUserDBRepository(ctrl *gomock.Controller) *MockNonRelationalUserDBRepository {
	mock := &MockNonRelationalUserDBRepository{ctrl: ctrl}
	mock.recorder = &MockNonRelationalUserDBRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNonRelationalUserDBRepository) EXPECT() *MockNonRelationalUserDBRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockNonRelationalUserDBRepository) CreateUser(arg0 context.Context, arg1 *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockNonRelationalUserDBRepositoryMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockNonRelationalUserDBRepository)(nil).CreateUser), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockNonRelationalUserDBRepository) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockNonRelationalUserDBRepositoryMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockNonRelationalUserDBRepository)(nil).DeleteUser), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockNonRelationalUserDBRepository) GetUsers(arg0 context.Context, arg1, arg2 string) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockNonRelationalUserDBRepositoryMockRecorder) GetUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockNonRelationalUserDBRepository)(nil).GetUsers), arg0, arg1, arg2)
}

// UpdateUser mocks base method.
func (m *MockNonRelationalUserDBRepository) UpdateUser(arg0 context.Context, arg1 string, arg2 *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockNonRelationalUserDBRepositoryMockRecorder) UpdateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockNonRelationalUserDBRepository)(nil).UpdateUser), arg0, arg1, arg2)
}
